#!/bin/bash

# üöÄ Redis Docker - Start Script
# Script para iniciar Redis + RedisInsight

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Funci√≥n para logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] ‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ùå $1${NC}"
}

info() {
    echo -e "${CYAN}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ÑπÔ∏è  $1${NC}"
}

# Funci√≥n para verificar si Docker Compose est√° disponible
check_docker_compose() {
    if ! command -v docker-compose >/dev/null 2>&1; then
        if ! docker compose version >/dev/null 2>&1; then
            error "Docker Compose no est√° disponible"
            exit 1
        fi
        COMPOSE_CMD="docker compose"
    else
        COMPOSE_CMD="docker-compose"
    fi
}

# Funci√≥n para crear archivo .env si no existe
create_env_file() {
    if [ ! -f .env ]; then
        log "Creando archivo .env desde env.example..."
        cp env.example .env
        success "Archivo .env creado"
    else
        info "Archivo .env ya existe"
    fi
}

# Funci√≥n para iniciar servicios
start_services() {
    log "Iniciando Redis + RedisInsight..."
    
    $COMPOSE_CMD up -d redis redisinsight
    
    success "Servicios iniciados"
}

# Funci√≥n para verificar servicios
check_services() {
    log "Verificando servicios..."
    
    # Esperar a que Redis est√© listo
    log "Esperando a que Redis est√© listo..."
    timeout 60 bash -c 'until docker exec redis-db redis-cli -a redis123 ping >/dev/null 2>&1; do sleep 2; done'
    
    # Esperar a que RedisInsight est√© listo
    log "Esperando a que RedisInsight est√© listo..."
    timeout 60 bash -c 'until curl -f http://localhost:8001/health >/dev/null 2>&1; do sleep 2; done'
    
    success "Todos los servicios est√°n funcionando"
}

# Funci√≥n para mostrar informaci√≥n de conexi√≥n
show_connection_info() {
    echo ""
    success "üéâ Redis + RedisInsight est√°n funcionando!"
    echo ""
    info "üìã Informaci√≥n de conexi√≥n:"
    echo "  Redis:"
    echo "    Host: localhost"
    echo "    Puerto: 6379"
    echo "    Contrase√±a: redis123"
    echo "    Base de datos: 0"
    echo ""
    echo "  RedisInsight:"
    echo "    URL: http://localhost:8001"
    echo "    Usuario: default"
    echo "    Contrase√±a: redis123"
    echo ""
    info "üîß Comandos √∫tiles:"
    echo "  Ver logs: $COMPOSE_CMD logs -f"
    echo "  Parar servicios: $COMPOSE_CMD down"
    echo "  Reiniciar: $COMPOSE_CMD restart"
    echo "  Estado: $COMPOSE_CMD ps"
}

# Funci√≥n principal
main() {
    log "üöÄ Iniciando Redis + RedisInsight con Docker..."
    
    # Verificar Docker Compose
    check_docker_compose
    
    # Crear archivo .env
    create_env_file
    
    # Iniciar servicios
    start_services
    
    # Verificar servicios
    check_services
    
    # Mostrar informaci√≥n
    show_connection_info
}

# Ejecutar funci√≥n principal
main "$@"
