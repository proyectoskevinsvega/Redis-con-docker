version: '3.8'

# Configuración de variables
x-common-variables: &common-variables
  REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
  REDIS_PORT: ${REDIS_PORT:-6379}
  REDIS_DATABASES: ${REDIS_DATABASES:-16}
  REDIS_MAXMEMORY: ${REDIS_MAXMEMORY:-256mb}
  REDIS_MAXMEMORY_POLICY: ${REDIS_MAXMEMORY_POLICY:-allkeys-lru}

x-monitoring-variables: &monitoring-variables
  PROMETHEUS_ENABLED: ${PROMETHEUS_ENABLED:-true}
  GRAFANA_ENABLED: ${GRAFANA_ENABLED:-true}
  CLUSTERING_ENABLED: ${CLUSTERING_ENABLED:-false}

services:
  # Redis Database
  redis:
    build:
      context: ./docker
      dockerfile: Dockerfile.redis
    container_name: redis-db
    restart: unless-stopped
    environment:
      <<: *common-variables
      REDIS_REPLICATION_MODE: "master"
      REDIS_REPLICATION_USER: "replicator"
      REDIS_REPLICATION_PASSWORD: "replicator123"
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf
      - ./docker/init-scripts:/usr/local/bin/redis-init
    networks:
      - redis_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # RedisInsight Web Interface
  redisinsight:
    build:
      context: ./docker
      dockerfile: Dockerfile.redisinsight
    container_name: redisinsight-web
    restart: unless-stopped
    environment:
      REDISINSIGHT_HOST: redis-db
      REDISINSIGHT_PORT: 6379
      REDISINSIGHT_PASSWORD: ${REDIS_PASSWORD:-redis123}
      REDISINSIGHT_DB: 0
      REDISINSIGHT_NAME: "Redis Local"
      REDISINSIGHT_USERNAME: "default"
      REDISINSIGHT_AUTH: ${REDIS_PASSWORD:-redis123}
      RI_APP_HOST: 0.0.0.0
      RI_APP_PORT: 8001
      RI_APP_LOG_LEVEL: info
      RI_APP_DEBUG: false
    ports:
      - "${REDISINSIGHT_PORT:-8001}:8001"
    volumes:
      - redisinsight_data:/data
      - ./docker/redisinsight-config.json:/usr/local/etc/redisinsight/redisinsight.conf
    networks:
      - redis_network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Replica (solo si CLUSTERING_ENABLED=true)
  redis-replica:
    build:
      context: ./docker
      dockerfile: Dockerfile.redis-replica
    container_name: redis-replica
    restart: unless-stopped
    environment:
      <<: *common-variables
      REDIS_REPLICATION_MODE: "slave"
      REDIS_REPLICATION_USER: "replicator"
      REDIS_REPLICATION_PASSWORD: "replicator123"
      REDIS_MASTER_HOST: "redis-db"
      REDIS_MASTER_PORT: "6379"
    ports:
      - "${REDIS_REPLICA_PORT:-6380}:6379"
    volumes:
      - redis_replica_data:/data
    networks:
      - redis_network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - clustering

  # Prometheus (solo si PROMETHEUS_ENABLED=true)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - redis_network
    profiles:
      - monitoring

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    restart: unless-stopped
    ports:
      - "${REDIS_EXPORTER_PORT:-9121}:9121"
    environment:
      REDIS_ADDR: "redis://redis-db:6379"
      REDIS_PASSWORD: "${REDIS_PASSWORD:-redis123}"
    networks:
      - redis_network
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - monitoring

  # Redis Replica Exporter (solo si hay réplica)
  redis-replica-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-replica-exporter
    restart: unless-stopped
    ports:
      - "${REDIS_REPLICA_EXPORTER_PORT:-9122}:9121"
    environment:
      REDIS_ADDR: "redis://redis-replica:6379"
      REDIS_PASSWORD: "${REDIS_PASSWORD:-redis123}"
    networks:
      - redis_network
    depends_on:
      redis-replica:
        condition: service_healthy
    profiles:
      - monitoring
      - clustering

  # Grafana (solo si GRAFANA_ENABLED=true)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      GF_SECURITY_ADMIN_USER: "${GRAFANA_ADMIN_USER:-admin}"
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD:-admin123}"
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - redis_network
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  redis_replica_data:
    driver: local
  redisinsight_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  redis_network:
    driver: bridge
    name: redis_network
